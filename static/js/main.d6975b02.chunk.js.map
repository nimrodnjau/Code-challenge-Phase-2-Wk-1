{"version":3,"sources":["components/Transaction.js","components/TransactionsList.js","components/Search.js","components/AddTransactionForm.js","components/AccountContainer.js","components/App.js","index.js"],"names":["Transaction","transaction","onDelete","id","date","description","category","amount","handleDelete","a","fetch","method","ok","Error","console","error","onClick","TransactionsList","transactions","className","map","Search","onSearch","useState","searchValue","setSearchValue","type","placeholder","value","onChange","e","character","target","filteredTransactions","filter","toLowerCase","includes","AddTransactionForm","onSubmission","formData","setFormData","handleFormChange","event","name","prevFormData","handleSubmit","preventDefault","addTransaction","addedTransaction","newTransaction","headers","body","JSON","stringify","response","json","data","onSubmit","step","AccountContainer","setTransactions","useEffect","then","setFilteredTransactions","transactionToAdd","updatedTransactions","updatedFilteredTransactions","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6975b02.chunk.js","sourcesContent":["import React from \"react\";\n\n\nfunction Transaction({ transaction, onDelete }) {\n  const { id, date, description, category, amount } = transaction;\n  \n  //Handles delete functionality on the website\n  const handleDelete = async () => {\n    try {\n      // Sending a DELETE request to delete the transaction with the specified ID\n      const response = await fetch(`https://code-challenge-phase-2-wk-1-2.onrender.com/transactions/${id}`, {\n        method: \"DELETE\",\n      });\n      \n      // Checks if the request was successful\n      if (!response.ok) {\n        throw new Error(\"Failed to delete transaction\");\n      }\n\n      // Calls the onDelete callback to update the UI with the deleted transaction removed\n      onDelete(id);\n    } catch (error) {\n      console.error(\"Error deleting transaction:\", error);\n    }\n  };\n\n//Renders the data into the table\n  return (\n    <tr>\n      <td>{date}</td>\n      <td>{description}</td>\n      <td>{category}</td>\n      <td>{amount}</td>\n      <td>\n        <button onClick={handleDelete}>Delete</button>\n      </td>\n    </tr>\n  );\n}\n\nexport default Transaction;\n","import React from \"react\";\nimport Transaction from \"./Transaction\";\n\nfunction TransactionsList({ transactions, onDelete})//calling the props to be used in the component\n{\n\n    \n  return (\n    <table className=\"ui celled striped padded table\">\n      <tbody>\n        <tr>\n          <th>\n            <h3 className=\"ui center aligned header\">Date</h3>\n          </th>\n          <th>\n            <h3 className=\"ui center aligned header\">Description</h3>\n          </th>\n          <th>\n            <h3 className=\"ui center aligned header\">Category</h3>\n          </th>\n          <th>\n            <h3 className=\"ui center aligned header\">Amount</h3>\n          </th>\n        </tr>\n     \n        {/* rendering a list of <Transaction> components here */}\n        {transactions && transactions.map((transaction) => (\n          <Transaction key={transaction.id} transaction={transaction} onDelete={onDelete} />\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default TransactionsList;\n","import React, {useState} from \"react\";\n\n\nfunction Search({transactions, onSearch}) {\n  const [searchValue, setSearchValue] = useState(\"\");\n  //\n  const handleSearch = (e) => {\n    const character = e.target.value\n    setSearchValue(character);\n    const filteredTransactions = transactions.filter(transaction =>\n      transaction.description.toLowerCase().includes(character.toLowerCase())\n    );\n    // Pass the filtered transactions to the parent component\n    onSearch(filteredTransactions);\n  };\n\n\n\n  return (\n    <div className=\"ui large fluid icon input\">\n      <input\n        type=\"text\"\n        placeholder=\"Search your Recent Transactions\"\n        value={searchValue}\n        onChange={handleSearch}\n      />\n      <i className=\"circular search link icon\"></i>\n    </div>\n  );\n}\n\nexport default Search;\n","import React, {useState} from \"react\";\n\n\nfunction AddTransactionForm({transactions, onSubmission}) {\n  const [formData, setFormData] = useState({\n    date: \"\",\n    description: \"\",\n    category: \"\",\n    amount: 0,\n  });\n\n  function handleFormChange (event) {\n    const {name, value} = event.target\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      [name]: value\n    }))  \n  }\n  //The new value input is added to the data on the DOM\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const addedTransaction = await addTransaction(formData);\n      onSubmission(addedTransaction);\n      setFormData({\n        date: \"\",\n        description: \"\",\n        category: \"\",\n        amount: 0,\n      });\n    } catch (error) {\n      console.error('Error submitting transaction:', error);\n    }\n  };\n\n  //This adds the input data to be sent to the server\n  const addTransaction = async (newTransaction) => {\n    const BASE_URL = \"https://code-challenge-phase-2-wk-1-2.onrender.com\";\n    try {\n      const response = await fetch(`${BASE_URL}/transactions`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(newTransaction),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to add transaction');\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error adding transaction:', error);\n      throw error;\n    }\n  };\n  \n\n  return (\n    <div className=\"ui segment\">\n      <form className=\"ui form\"  onSubmit={handleSubmit}>\n        <div className=\"inline fields\">\n          <input value={formData.date} type=\"date\" name=\"date\" onChange={handleFormChange}/>\n          <input value={formData.description} type=\"text\" name=\"description\" placeholder=\"Description\" onChange={handleFormChange} />\n          <input value={formData.category} type=\"text\" name=\"category\" placeholder=\"Category\" onChange={handleFormChange}/>\n          <input value={formData.amount} type=\"number\" name=\"amount\" placeholder=\"Amount\" step=\"0.01\" onChange={handleFormChange} />\n        </div>\n        <button className=\"ui button\" type=\"submit\">\n          Add Transaction\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default AddTransactionForm;\n","import React, {useState, useEffect} from \"react\";\nimport TransactionsList from \"./TransactionsList\";\nimport Search from \"./Search\";\nimport AddTransactionForm from \"./AddTransactionForm\";\n\nfunction AccountContainer() {\n  \n//This fetches data from the server and assigns the data to a variable\n  const [transactions, setTransactions] = useState([])\n    useEffect(()=>{\n      fetch('https://code-challenge-phase-2-wk-1-2.onrender.com/transactions')\n        .then((response) => response.json())\n        .then((data) => {\n         setTransactions(data)\n         setFilteredTransactions(data)\n        } );\n    }, [])\n\n\n    const handleSubmission = (newTransaction) => {\n    // Create a new transaction object with all necessary properties\n    const transactionToAdd = {\n      id: newTransaction.id,\n      date: newTransaction.date,\n      description: newTransaction.description,\n      category: newTransaction.category,\n      amount: newTransaction.amount\n    };\n      // Updates the transactions state with the new transaction\n      setTransactions([...transactions, newTransaction]);\n      setFilteredTransactions([...filteredTransactions, transactionToAdd ])\n    };\n\n\n    const [filteredTransactions, setFilteredTransactions] = useState([]);\n    const handleSearch = (filteredTransactions) => {\n      setFilteredTransactions(filteredTransactions);\n      // Update the state or perform any other logic based on the filtered transactions\n    };\n\n\n\n    const handleDelete = (id) => {\n      // Removes the deleted transaction from transactions state\n      const updatedTransactions = transactions.filter(transaction => transaction.id !== id);\n      setTransactions(updatedTransactions);\n      // Removes the deleted transaction from filteredTransactions state\n      const updatedFilteredTransactions = filteredTransactions.filter(transaction => transaction.id !== id);\n      setFilteredTransactions(updatedFilteredTransactions);\n    };\n \n  return (\n    <div>\n      <Search transactions={transactions} onSearch={handleSearch}/>\n      <AddTransactionForm transactions={transactions} onSubmission={handleSubmission}/>\n      <TransactionsList  transactions={filteredTransactions} onDelete={handleDelete}/>\n    </div>\n  );\n}\n\nexport default AccountContainer;\n","import React from \"react\";\nimport AccountContainer from \"./AccountContainer\";\n\nfunction App() {\n  return (\n    <div className=\"ui raised segment\">\n      <div className=\"ui segment violet inverted\">\n        <h2>The Royal Bank of Flatiron</h2>\n      </div>\n      <AccountContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}